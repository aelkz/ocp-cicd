apiVersion: v1
kind: Template
labels:
  template: cicd
  group: cicd
metadata:
  annotations:
    iconClass: icon-jenkins
    tags: instant-app,jenkins,gogs,nexus,cicd
  name: cicd
message: "blah"
parameters:
- displayName: Project Name
  name: PROJECT_NAME
  required: true
- displayName: Project GIT URL repository (http://<HOST-PREFIX>.nip.io/<PROJECT>.git)
  name: GIT_URL_REPO
  required: true
- displayName: SonarQube URL (http://<HOST>.nip.io)
  name: SONAR_URL
  required: true
- displayName: Project GIT Branch (default to master)
  value: master
  name: GIT_BRANCH
  required: false
- displayName: DEV project name (defaults to 'proj-<PROJECT>-dev')
  value: proj-${DEV_PROJECT}-dev
  name: DEV_PROJECT
  required: true
- displayName: STAGE project name (defaults to 'proj-<PROJECT>-stage')
  value: proj-${STAGE_PROJECT}-stage
  name: STAGE_PROJECT
  required: true
- description: Webhook secret
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: WEBHOOK_SECRET
  required: true
objects:
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: default_admin
  roleRef:
    name: admin
  subjects:
  - kind: ServiceAccount
    name: default
# project pipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    name: ${PROJECT_NAME}-pipeline
  spec:
    triggers:
      - type: GitHub
        github:
          secret: ${WEBHOOK_SECRET}
      - type: Generic
        generic:
          secret: ${WEBHOOK_SECRET}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: PROJECT_NAME
          value: ${PROJECT_NAME}
        - name: DEV_PROJECT
          value: proj-${DEV_PROJECT}-dev
        - name: STAGE_PROJECT
          value: proj-${STAGE_PROJECT}-stage
        - name: GIT_BRANCH
          value: ${GIT_BRANCH}
        - name: GIT_URL_REPO
          value: ${GIT_URL_REPO}
        - name: SONAR_URL
          value: ${SONAR_URL}
        jenkinsfile: |-
          def version, mvnCmd = "mvn -s configuration/cicd-settings-nexus3.xml"
          def project=env.DEV_PROJECT

          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Build App') {
                steps {
                  git branch: "${env.GIT_BRANCH}", url: "${env.GIT_URL_REPO}", credentialsId: "gitlab-credentials"
                  script {
                      echo "INFO: gattering maven configuration."
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "${mvnCmd} install -DskipTests=true"
                }
              }
              stage('Test') {
                steps {
                  sh "${mvnCmd} test"
                  step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                }
              }
              stage('Code Analysis') {
                steps {
                  script {
                    sh "${mvnCmd} sonar:sonar -Dsonar.host.url=${env.SONAR_URL} -DskipTests=true"
                  }
                }
              }
              stage('Archive App') {
                steps {
                  sh "${mvnCmd} deploy -DskipTests=true -P nexus3"
                }
              }
              stage('Create Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        return !openshift.selector("bc", "${env.PROJECT_NAME}").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    echo "INFO: creating new build from image-stream."
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        openshift.newBuild("--name=${env.PROJECT_NAME}", "--image-stream=openshift/wildfly-101-centos7:v10.1", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Build Image') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/*.war oc-build/deployments/ROOT.war"
                  sh "oc start-build ${env.PROJECT_NAME} --from-file=oc-build/deployments/ROOT.war -n ${env.DEV_PROJECT} --wait"
                }
              }
              stage('Create DEV') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        return !openshift.selector('dc', '${env.PROJECT_NAME}').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        def app = openshift.newApp("${env.PROJECT_NAME}:latest")
                        app.narrow("svc").expose();

                        openshift.set("probe dc/${env.PROJECT_NAME} --readiness --get-url=http://:8080/actuator/health --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10")
                        openshift.set("probe dc/${env.PROJECT_NAME} --liveness  --get-url=http://:8080/actuator/health --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10")

                        def dc = openshift.selector("dc", "${env.PROJECT_NAME}")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/${env.PROJECT_NAME}", "--manual")
                      }
                    }
                  }
                }
              }
              stage('Deploy DEV') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        openshift.selector("dc", "${env.PROJECT_NAME}").rollout().latest();
                      }
                    }
                  }
                }
              }
              stage('Promote to STAGE?') {
                steps {
                  timeout(time:15, unit:'MINUTES') {
                      input message: "Promote to STAGE?", ok: "Promote"
                  }

                  script {
                    openshift.withCluster() {
                      openshift.tag("${env.DEV_PROJECT}/${env.PROJECT_NAME}:latest", "${env.STAGE_PROJECT}/${env.PROJECT_NAME}:${version}")
                    }
                  }
                }
              }
              stage('Deploy STAGE') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.STAGE_PROJECT) {
                        if (openshift.selector('dc', '${env.PROJECT_NAME}').exists()) {
                          openshift.selector('dc', '${env.PROJECT_NAME}').delete()
                          openshift.selector('svc', '${env.PROJECT_NAME}').delete()
                          openshift.selector('route', '${env.PROJECT_NAME}').delete()
                        }

                        openshift.newApp("${env.PROJECT_NAME}:${version}").narrow("svc").expose()
                        openshift.set("probe dc/${env.PROJECT_NAME} --readiness --get-url=http://:8080/actuator/health --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10")
                        openshift.set("probe dc/${env.PROJECT_NAME} --liveness  --get-url=http://:8080/actuator/health --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10")
                      }
                    }
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: cicd-pipeline
      role: jenkins-slave
    name: jenkins-slaves
  data:
    maven-template: |-
      <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
        <inheritFrom></inheritFrom>
        <name>maven</name>
        <privileged>false</privileged>
        <alwaysPullImage>false</alwaysPullImage>
        <instanceCap>2147483647</instanceCap>
        <idleMinutes>0</idleMinutes>
        <label>maven</label>
        <serviceAccount>jenkins</serviceAccount>
        <nodeSelector></nodeSelector>
        <customWorkspaceVolumeEnabled>false</customWorkspaceVolumeEnabled>
        <workspaceVolume class="org.csanchez.jenkins.plugins.kubernetes.volumes.workspace.EmptyDirWorkspaceVolume">
          <memory>false</memory>
        </workspaceVolume>
        <volumes />
        <containers>
          <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
            <name>jnlp</name>
            <image>registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7</image>
            <privileged>false</privileged>
            <alwaysPullImage>false</alwaysPullImage>
            <workingDir>/tmp</workingDir>
            <command></command>
            <args>${computer.jnlpmac} ${computer.name}</args>
            <ttyEnabled>false</ttyEnabled>
            <resourceRequestCpu>200m</resourceRequestCpu>
            <resourceRequestMemory>512Mi</resourceRequestMemory>
            <resourceLimitCpu>2</resourceLimitCpu>
            <resourceLimitMemory>4Gi</resourceLimitMemory>
            <envVars/>
          </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
        </containers>
        <envVars/>
        <annotations/>
        <imagePullSecrets/>
      </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>