apiVersion: v1
kind: Template
labels:
  template: cicd
  group: cicd
metadata:
  annotations:
    iconClass: icon-jenkins
    tags: instant-app,jenkins,gogs,nexus,cicd
  name: cicd
message: "blah"
parameters:
- displayName: Application Name
  name: APPLICATION_NAME
  required: true
- displayName: Project GIT URL repository (http://<HOST-PREFIX>.nip.io/<PROJECT>.git)
  name: GIT_URL_REPO
  required: true
- displayName: SonarQube URL (http://<HOST>.nip.io)
  name: SONAR_URL
  required: true
- displayName: Project GIT Branch (default to master)
  value: master
  name: GIT_BRANCH
  required: false
- displayName: DEV project name (defaults to 'proj-<PROJECT>-dev')
  name: DEV_PROJECT
  required: true
- displayName: UAT project name (defaults to 'proj-<PROJECT>-uat')
  name: UAT_PROJECT
  required: true
- displayName: PRD project name (defaults to 'proj-<PROJECT>-prd')
  name: PRD_PROJECT
  required: true
- displayName: Cluster IP Address (for use with DNS wildcard routes)
  name: CLUSTER_IP_ADDRESS
  required: true
- displayName: Replicas (min-value = 1)
  name: REPLICAS
  required: true
- description: Webhook secret
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: WEBHOOK_SECRET
  required: true
objects:
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: default_admin
  roleRef:
    name: admin
  subjects:
  - kind: ServiceAccount
    name: default
# project pipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    name: ${APPLICATION_NAME}-pipeline
  spec:
    triggers:
      - type: GitHub
        github:
          secret: ${WEBHOOK_SECRET}
      - type: Generic
        generic:
          secret: ${WEBHOOK_SECRET}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: APPLICATION_NAME
          value: ${APPLICATION_NAME}
        - name: DEV_PROJECT
          value: ${DEV_PROJECT}
        - name: UAT_PROJECT
          value: ${UAT_PROJECT}
        - name: PRD_PROJECT
          value: ${PRD_PROJECT}
        - name: GIT_BRANCH
          value: ${GIT_BRANCH}
        - name: GIT_URL_REPO
          value: ${GIT_URL_REPO}
        - name: SONAR_URL
          value: ${SONAR_URL}
        - name: REPLICAS
          value: ${REPLICAS}
        jenkinsfile: |-
          @Library('custom-functions') _

          def version, mvnCmd = "mvn -s configuration/cicd-settings-nexus3.xml"
          def project=env.DEV_PROJECT

          def getLatestVersionFromDC = { deployment ->
            return deployment.narrow("dc").object().status.latestVersion
          }

          pipeline {
            environment {
              PRODUCT_OWNERS_GROUP = 'G_OCP_PRODUCTION_APPROVER'
              RELEASERS_GROUP = 'G_OCP_PRODUCTION_RELEASER'
              DEPLOYERS_GROUP = 'G_OCP_PRODUCTION_OPERATOR'
            }
            agent {
              label 'maven'
            }
            stages {
              stage('Checkout') {
                steps {
                  git branch: "${env.GIT_BRANCH}", url: "${env.GIT_URL_REPO}", credentialsId: "gitlab-credentials"
                  // git url: "${env.GIT_URL_REPO}", branch: "${env.GIT_BRANCH}", credentialsId: 'gitlab-credentials'
                }
              }
              stage('Build') {
                steps {
                  script {
                      echo "INFO: gattering maven configuration."
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "rm -rf target"
                  sh "${mvnCmd} install -DskipTests=true"
                  /*
                    withMaven(mavenSettingsConfig: 'maven-settings') {
                      sh "mvn -Djavax.net.ssl.trustStore=/opt/cacerts/cacerts -Djavax.net.ssl.trustStorePassword=changeit compile"
                    }  
                  */
                }
              }
              stage('Unit Test') {
                steps {
                  sh "${mvnCmd} test"
                  step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                  /*
                    withMaven(mavenSettingsConfig: 'maven-settings') {
                      sh "mvn -Djavax.net.ssl.trustStore=/opt/cacerts/cacerts -Djavax.net.ssl.trustStorePassword=changeit test"
                    }  
                  */
                }
              }
              stage('Static Analysis') {
                steps {
                  script {
                    sh "${mvnCmd} sonar:sonar -Dsonar.host.url=${env.SONAR_URL} -DskipTests=true"

                    timeout(time: 30, unit: 'MINUTES') {
                      def _qualityGate = waitQualityGate()

                      if (_qualityGate.status == 'ERROR') {
                        error "ERROR: SonarQube Static Code Analysis Failed. Check SonarQube project report for details."
                      }
                      echo "WARNING: SonarQube Code Analysis status - ${_qualityGate.status}"
                    }
                  }
                  /*
                    withMaven(mavenSettingsConfig: 'maven-settings') {
                      withSonarQubeEnv('Sonar 6.4') {
                        sh "mvn -Djavax.net.ssl.trustStore=/opt/cacerts/cacerts -Djavax.net.ssl.trustStorePassword=changeit sonar:sonar"
                      }
                    }  
                  */
                }
              }
              stage('Archive App') {
                steps {
                  sh "${mvnCmd} deploy -DskipTests=true -P nexus3"
                  // sh "mvn ... -DnewVersion=${VERSION} versions:set"
                  // sh "mvn ... versions:commit"
                  /*
                    withMaven(mavenSettingsConfig: 'maven-settings') {
                      sh "mvn -Djavax.net.ssl.trustStore=/opt/cacerts/cacerts -Djavax.net.ssl.trustStorePassword=changeit -DskipTests deploy"
                      stash includes: 'target/*.jar, target/*.war', name: 'artifact-stash'
                    }  
                  */
                }
              }
              stage('Create Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        return !openshift.selector("bc", "${env.APPLICATION_NAME}").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    echo "INFO: creating new build from image-stream."
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        openshift.newBuild("--name=${env.APPLICATION_NAME}", "--image-stream=openshift/wildfly:10.1", "--binary=true")
                      }
                    }
                  }
                }
              }
              stage('Build Image') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                        sh "cp target/*.war oc-build/deployments/ROOT.war"
                        fileName = "oc-build/deployments/ROOT.war"

                        openshift.selector("bc", "${env.APPLICATION_NAME}").startBuild("--from-file=${fileName}", "--wait=true")
                      }
                    }
                  }      
                }
              }
              stage('Deploy DEV') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        return !openshift.selector("dc", "${env.APPLICATION_NAME}").exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        def app = openshift.newApp("${env.APPLICATION_NAME}:latest")
                        app.narrow("svc").expose();

                        //openshift.set("probe dc/tasks --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10")
                        //openshift.set("probe dc/tasks --liveness  --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10")

                        def dc = openshift.selector("dc", "${env.APPLICATION_NAME}")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/${env.APPLICATION_NAME}", "--manual")
                      }
                    }
                  }
                }
              }
              stage('Promote to User Acceptance?') {
                steps {
                  timeout(time:30, unit:'MINUTES') {
                      input message: "Promote ${APPLICATION_NAME} VERSION:${version} to UAT?", ok: "Promote"
                  }

                  script {
                    openshift.withCluster() {
                      openshift.tag("${env.DEV_PROJECT}/${env.APPLICATION_NAME}:latest", "${env.UAT_PROJECT}/${env.APPLICATION_NAME}:${version}")
                    }
                  }
                }
              }
              stage('Deploy UAT') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.UAT_PROJECT) {
                        if (openshift.selector("dc", "${env.APPLICATION_NAME}").exists()) {
                          openshift.selector("dc", "${env.APPLICATION_NAME}").delete()
                        }
                        if (openshift.selector("svc", "${env.APPLICATION_NAME}").exists()) {
                          openshift.selector("svc", "${env.APPLICATION_NAME}").delete()
                        }
                        if (openshift.selector("route", "${env.APPLICATION_NAME}").exists()) {
                          openshift.selector("route", "${env.APPLICATION_NAME}").delete()
                        }

                        openshift.newApp("${env.APPLICATION_NAME}:${version}").narrow("svc").expose()
                        //openshift.set("probe dc/${env.APPLICATION_NAME} --readiness --get-url=http://:8080/actuator/health --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10")
                        //openshift.set("probe dc/${env.APPLICATION_NAME} --liveness  --get-url=http://:8080/actuator/health --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10")
                      }
                    }
                  }
                }
              }
              stage('Promote to Production?') {
                steps {
                  timeout(time:180, unit:'MINUTES') {
                      input message: "Promote ${APPLICATION_NAME} VERSION:${version} to PRODUCTION?", ok: "Promote"
                  }

                  script {
                    openshift.withCluster() {
                      openshift.tag("${env.UAT_PROJECT}/${env.APPLICATION_NAME}:${version}", "${env.PRD_PROJECT}/${env.APPLICATION_NAME}:latest")
                    }
                  }
                }
              }
              stage('Deploy PRD') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PRD_PROJECT) {
                        if (openshift.selector("dc", "${env.APPLICATION_NAME}").exists()) {
                          openshift.selector("dc", "${env.APPLICATION_NAME}").delete()
                        }
                        if (openshift.selector("svc", "${env.APPLICATION_NAME}").exists()) {
                          openshift.selector("svc", "${env.APPLICATION_NAME}").delete()
                        }
                        if (openshift.selector("route", "${env.APPLICATION_NAME}").exists()) {
                          openshift.selector("route", "${env.APPLICATION_NAME}").delete()
                        }

                        openshift.newApp("${env.APPLICATION_NAME}:latest").narrow("svc").expose()
                        //openshift.set("probe dc/${env.APPLICATION_NAME} --readiness --get-url=http://:8080/actuator/health --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10")
                        //openshift.set("probe dc/${env.APPLICATION_NAME} --liveness  --get-url=http://:8080/actuator/health --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10")
                      }
                    }
                  }
                }
              }
              stage('Scale UP') {
                agent "any"
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.PRD_PROJECT) {
                        def dc = openshift.selector("dc", "${APPLICATION_NAME}")
                        def latestDeploymentVersion = getLatestVersionFromDC(dc)

                        echo "INFO: Scaling application up to ${REPLICAS} instances."
                        dc.scale("--replicas=${REPLICAS}")

                        echo "INFO: Checking application: ${APPLICATION_NAME}-${latestDeploymentVersion}"
                        def rc = openshift.selector('rc', "${APPLICATION_NAME}-${latestDeploymentVersion}")

                        def rcMap = null
                        def deployResult = false

                        timeout(30) {
                          rc.untilEach(1) {
                            rcMap = it.object()
                            echo ""
                            echo ""
                            echo "------------------------------------------------------------------------------------------"
                            echo "| app-name: ${APPLICATION_NAME}/ latestDeploymentVersion=${latestDeploymentVersion}      |"
                            echo "| desired: ${rcMap.spec.replicas}/ current: ${rcMap.status.readyReplicas}                |"
                            echo "------------------------------------------------------------------------------------------"
                            echo ""
                            echo ""

                            deployResult = (rcMap.spec.replicas.equals(rcMap.status.readyReplicas))

                            return deployResult
                          }
                        }
                      }
                    }
                  }
                }
              }
              stage('Terminate') {
                steps {
                  script {
                    echo "INFO: Ending application pipeline process."
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: cicd-pipeline
      role: jenkins-slave
    name: jenkins-slaves
  data:
    maven-template: |-
      <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
        <inheritFrom></inheritFrom>
        <name>maven</name>
        <privileged>false</privileged>
        <alwaysPullImage>false</alwaysPullImage>
        <instanceCap>2147483647</instanceCap>
        <idleMinutes>0</idleMinutes>
        <label>maven</label>
        <serviceAccount>jenkins</serviceAccount>
        <nodeSelector></nodeSelector>
        <customWorkspaceVolumeEnabled>false</customWorkspaceVolumeEnabled>
        <workspaceVolume class="org.csanchez.jenkins.plugins.kubernetes.volumes.workspace.EmptyDirWorkspaceVolume">
          <memory>false</memory>
        </workspaceVolume>
        <volumes />
        <containers>
          <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
            <name>jnlp</name>
            <image>registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7</image>
            <privileged>false</privileged>
            <alwaysPullImage>false</alwaysPullImage>
            <workingDir>/tmp</workingDir>
            <command></command>
            <args>${computer.jnlpmac} ${computer.name}</args>
            <ttyEnabled>false</ttyEnabled>
            <resourceRequestCpu>512m</resourceRequestCpu>
            <resourceRequestMemory>512Mi</resourceRequestMemory>
            <resourceLimitCpu>2</resourceLimitCpu>
            <resourceLimitMemory>4Gi</resourceLimitMemory>
            <envVars/>
          </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
        </containers>
        <envVars/>
        <annotations/>
        <imagePullSecrets/>
      </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
# Setup Application Environment and Configurations
- apiVersion: batch/v1
  kind: Job
  metadata:
    name: cicd-application-installer
  spec:
    activeDeadlineSeconds: 600
    completions: 1
    parallelism: 1
    template:
      spec:
        containers:
        - env:
          - name: APPLICATION_NAME
            value: ${APPLICATION_NAME}
          - name: DEV_PROJECT
            value: ${DEV_PROJECT}
          - name: UAT_PROJECT
            value: ${UAT_PROJECT}
          - name: PRD_PROJECT
            value: ${PRD_PROJECT}
          - name: GIT_BRANCH
            value: ${GIT_BRANCH}
          - name: GIT_URL_REPO
            value: ${GIT_URL_REPO}
          - name: SONAR_URL
            value: ${SONAR_URL}
          - name: CLUSTER_IP_ADDRESS
            value: ${CLUSTER_IP_ADDRESS}
          - name: CICD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          command:
          - /bin/bash
          - -x
          - -c
          - |
            #oc new-project $DEV_PROJECT --description="projeto: $APPLICATION_NAME DEV" --display-name="$DEV_PROJECT"
            #oc new-project $UAT_PROJECT --description="projeto: $APPLICATION_NAME UAT" --display-name="$UAT_PROJECT"
            #oc new-project $PRD_PROJECT --description="projeto: $APPLICATION_NAME PRD" --display-name="$PRD_PROJECT"

            #sleep 5

            #oc policy add-role-to-group edit system:serviceaccounts:cicd-devtools -n $DEV_PROJECT
            #oc policy add-role-to-group edit system:serviceaccounts:cicd-devtools -n $UAT_PROJECT
            #oc policy add-role-to-group edit system:serviceaccounts:cicd-devtools -n $PRD_PROJECT

            #oc new-build --name=$APPLICATION_NAME --image-stream=wildfly:10.1 --binary=true -n $DEV_PROJECT
            #oc new-build --name=$APPLICATION_NAME --image-stream=wildfly:10.1 --binary=true -n $UAT_PROJECT
            #oc new-build --name=$APPLICATION_NAME --image-stream=wildfly:10.1 --binary=true -n $PRD_PROJECT

            #sleep 60

            #oc new-app $APPLICATION_NAME:latest --allow-missing-images -n $DEV_PROJECT
            #oc rollout cancel dc/$APPLICATION_NAME -n $DEV_PROJECT
            #oc set triggers dc -l app=$APPLICATION_NAME --containers=$APPLICATION_NAME --from-image=$APPLICATION_NAME:latest --manual -n $DEV_PROJECT

            #sleep 5

            #oc new-app $APPLICATION_NAME:latest --allow-missing-images -n $UAT_PROJECT
            #oc rollout cancel dc/$APPLICATION_NAME -n $UAT_PROJECT
            #oc set triggers dc -l app=$APPLICATION_NAME --containers=$APPLICATION_NAME --from-image=$APPLICATION_NAME:latest --manual -n $UAT_PROJECT

            #sleep 5

            #oc new-app $APPLICATION_NAME:latest --allow-missing-images -n $PRD_PROJECT
            #oc rollout cancel dc/$APPLICATION_NAME -n $PRD_PROJECT
            #oc set triggers dc -l app=$APPLICATION_NAME --containers=$APPLICATION_NAME --from-image=$APPLICATION_NAME:latest --manual -n $PRD_PROJECT

            #sleep 10
          image: openshift/origin:v3.10
          name: cicd-application-installer-job
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Never
